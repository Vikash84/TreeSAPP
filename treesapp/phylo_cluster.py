#!/usr/bin/env python3

import sys
import logging

from ete3 import Tree, TreeNode

from treesapp.treesapp_args import TreeSAPPArgumentParser
from treesapp.refpkg import ReferencePackage


class PhyloClust:
    def __init__(self):
        self.refpkg = ReferencePackage()
        self.arg_parser = TreeSAPPArgumentParser(description="A tool for sorting query sequences placed on a phylogeny"
                                                             " into phylogenetically-inferred clusters.")
        # self.method = ""
        self.alpha = 0
        self.part_metric = "max"
        self.normalize = False
        self.jplace = ""
        return

    def load_args(self, args) -> None:
        # Load the arguments into class attributes
        self.refpkg.f__json = args.refpkg_path
        self.part_metric = args.partition_metric
        self.jplace = args.jplace
        self.alpha = args.alpha

        # Determine whether to normalise the evolutionary distances or not
        if args.evo_dist == "red":
            self.normalize = True
        elif args.evo_dist == "raw":
            self.normalize = False
        else:
            logging.error("Unexpected distance normalisation method: '{}'.\n".format(args.evo_dist))
            sys.exit(3)
        return

    def get_arguments(self, sys_args: list) -> None:
        # Add the arguments to the argument parser
        self.arg_parser.add_refpkg_file_param()
        self.arg_parser.reqs.add_argument("-j", "--jplace", nargs='+',
                                          required=True,
                                          help="Path to one or more JPlace files generated by"
                                               " placement on a reference package's phylogeny.")
        self.arg_parser.pplace_args.add_argument("-d", "--evo_dist",
                                                 choices=["raw", "red"], default="raw", required=False,
                                                 help="The evolutionary distance normalisation method to use.")
        self.arg_parser.optopt.add_argument("-m", "--partition_metric",
                                            choices=["mean", "median", "max"], default="max", required=False,
                                            help="The metric to use when deciding when to cut a cluster.")
        self.arg_parser.optopt.add_argument("-a", "--alpha",
                                            default=0, required=False,
                                            help="The evolutionary distance threshold defining the cluster boundaries.")

        # Parse the arguments
        self.load_args(self.arg_parser.parse_args(sys_args))
        return


def define_tree_clusters(tree: str):
    return


def cluster_phylogeny(sys_args: list) -> None:
    p_clust = PhyloClust()
    p_clust.get_arguments(sys_args)

    # TODO: Load the JPlace file

    # TODO: Load the phylogeny

    # TODO: Calculate RED distances for each node

    # TODO: Perform maximum, mean, or median distance min-cut partitioning

    return


if __name__ == "__main__":
    cluster_phylogeny(sys.argv[1:])
